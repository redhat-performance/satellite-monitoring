# Installed by Satellite Ansible Installer
# Config type: {{config_type}}

#Extract the candlepin password
{% set candlepin_password = satellite_candlepin_password.stdout.split('=') %}

# Interval default is 10s
Interval {{collectd_interval|default('10')}}

# Hostname for this machine, if not defined, use gethostname(2) system call
Hostname "{{inventory_hostname}}"

# Allow collectd to log
LoadPlugin syslog

# Loaded Plugins:
LoadPlugin write_graphite
LoadPlugin cpu
LoadPlugin df
LoadPlugin disk
LoadPlugin interface
LoadPlugin irq
LoadPlugin load
LoadPlugin memory
LoadPlugin network
LoadPlugin numa
LoadPlugin processes
LoadPlugin postgresql
LoadPlugin statsd
LoadPlugin swap
LoadPlugin unixsock
LoadPlugin uptime

# Open unix domain socket for collectdctl
<Plugin unixsock>
  SocketFile "/var/run/collectd-unixsock"
  SocketGroup "collectd"
  SocketPerms "0770"
  DeleteSocket true
</Plugin>

{% if collectd_network_interface is defined %}
#Configure the network interface to use
<Plugin interface>
  Interface "{{ collectd_network_interface }}"
  IgnoreSelected false
</Plugin>
{% endif %}

{% if collectd_remote_server is defined %}
#Configure where should collectd send its data
<Plugin network>
  Server "{{ collectd_remote_server }}" "{{ collectd_remote_port }}"
</Plugin>
{% endif %}

LoadPlugin apache
<Plugin apache>
    # Leave "Instance" blank unless you have multiple
    # Apache instances, in which case you can provide
    # a name to identify each instance
   <Instance "">
       URL "http://127.0.0.1/server-status?auto"
   </Instance>
</Plugin>

# Setup statsd
<Plugin statsd>
  Host "0.0.0.0"
  Port "8125"
  DeleteSets true
</Plugin>

# Graphite Host Configuration
<Plugin write_graphite>
  <Carbon>
    Host "{{ carbon_host }}"
    Port "{{ carbon_port }}"
    Prefix "{{graphite_prefix}}."
    Protocol "tcp"
    LogSendErrors true
    StoreRates true
    AlwaysAppendDS false
    EscapeCharacter "_"
  </Carbon>
</Plugin>

<Plugin df>
  ValuesPercentage true
</Plugin>

<Plugin disk>
  Disk "/^[hsv]d[a-z]+[0-9]?$/"
  IgnoreSelected false
</Plugin>

<Plugin postgresql>
  <Database candlepin>
    Host "localhost"
    Port "5432"
    User "candlepin"
    Password "{{ candlepin_password[1] }}"
    # Predefined:
    Query backends
    Query transactions
    Query queries
    Query table_states
    Query disk_io
    Query disk_usage
  </Database>
  <Database foreman>
    Host "localhost"
    Port "5432"
    User "foreman"
    Password "{{ satellite_foreman_password.stdout }}"
    # Predefined:
    Query backends
    Query transactions
    Query queries
    Query table_states
    Query disk_io
    Query disk_usage
  </Database>
  <Database pulpcore>
    Host "localhost"
    Port "5432"
    User "pulp"
    Password "{{ satellite_pulp_password.stdout }}"
    # Predefined:
    Query backends
    Query transactions
    Query queries
    Query table_states
    Query disk_io
    Query disk_usage
  </Database>
</Plugin>

<Plugin processes>
  # DynFlow
  ProcessMatch "dynflow" "(dynflow.*|sidekiq.*)"

  # Apache
  Process "httpd"

  # Mongodb
  Process "mongod"

  # Passenger - not in sat 6.9 onwards
  ProcessMatch "Passenger-Forman" "Passenger.+RackApp:.+/usr/share/foreman"
  ProcessMatch "Passenger-Puppet" "Passenger.+RackApp:.+/etc/puppet/rack"
  ProcessMatch "PassengerHelperAgent" "PassengerHelperAgent"
  ProcessMatch "PassengerLoggingAgent" "PassengerLoggingAgent"
  ProcessMatch "PassengerWatchdog" "PassengerWatchdog"

  # Postgres database
  ProcessMatch "postgres" "postgres.*"

  # Pulp
  ProcessMatch "Pulp-Scheduler" "/usr/bin/python.+/usr/bin/celery.+beat.+--scheduler=pulp.server.async.scheduler.Scheduler"
  ProcessMatch "Pulp-Resource-Manager" "/usr/bin/python.+/usr/bin/celery.+worker.+-A.+pulp.server.async.app.+-n.+resource_manager"
  ProcessMatch "Pulp-Resource-Worker" "/usr/bin/python.+/usr/bin/celery.+worker.+-n.+reserved_resource_worker"
  # Pulp in sat6.10
  ProcessMatch "Pulpcore-Content-Server" "/usr/bin/python.+/usr/bin/gunicorn.+pulpcore.content:server"
  ProcessMatch "Pulpcore-Worker" "/usr/bin/python.+/usr/bin/pulpcore-worker"
  ProcessMatch "Pulpcore-app-wsgi" "/usr/bin/python.+/usr/bin/gunicorn.+pulpcore.app.wsgi:application"

  # Puma workers
  ProcessMatch "Puma-Worker" "puma: cluster worker .*"

  # Puppet Agent
  ProcessMatch "Puppet-Agent" ".*puppet.+agent.+--no-daemonize"

  # Qpidd + dispatch router
  Process "qdrouterd"
  Process "qpidd"

  # Foreman smart proxy
  ProcessMatch "Foreman-SmartProxy" "ruby.+/usr/share/foreman-proxy/bin/smart-proxy"

  # Redis
  ProcessMatch "redis" ".*redis.*"

  # Squid
  Process "squid"

  # Tomcat
  ProcessMatch "Tomcat" ".*tomcat.*"
  
  # Mosquitto
  ProcessMatch "Mosquitto" ".*mosquitto.*"
  
   # rhcd
  ProcessMatch "rhcd" ".*rhcd.*"

  # Other background tasks
  ProcessMatch "Trends:Counter" "/opt/rh/ruby193/root/usr/bin/ruby.+/opt/rh/ruby193/root/usr/bin/rake.+trends:counter"
  ProcessMatch "LDAP:Refresh_usergroups" "/opt/rh/ruby193/root/usr/bin/ruby.+/opt/rh/ruby193/root/usr/bin/rake.+ldap:refresh_usergroups"

  ProcessMatch "ruby" ".*ruby.*"

  # Collect on collectd process
  ProcessMatch "collectd" "/usr/sbin/collectd.+-C.+/etc/collectd.conf"
</Plugin>

<Plugin swap>
  ReportBytes true
  ValuesPercentage true
</Plugin>

# Include other collectd configuration files
Include "/etc/collectd.d"
